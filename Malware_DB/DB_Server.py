import os
import sys
from socket import *
from concurrent.futures import ThreadPoolExecutor

from es_for_search import esSearch
from Configuration import Configuration

CONFIG_FILE_NAME = "dataInfo.config"
READ_BASE_PATH = "/media/samlon09/HDD2/malware_for_es/src/"
SAVE_SPA_PATH = "/media/samlon09/HDD2/malware_for_es/src/"


class DBServer:

    def __init__(self):
        global CONFIG_FILE_NAME
        global READ_BASE_PATH

        self.IP = '192.168.0.55'
        self.PORT = 1214
        self.sock = None

        self.config = None
        self.classifying_pool = ThreadPoolExecutor(5)

        self._initialize_server()
        self.print_Info()

    def _initialize_server(self):

        SERVER_ADDR = (self.IP, self.PORT)

        self.sock = socket(AF_INET, SOCK_STREAM)
        self.sock.bind(SERVER_ADDR)

    def start(self):
        if self.sock is None:
            print("[ERROR] The socket has not been initialized")
            sys.exit(1)

        self.sock.listen(20)

        try:
            while True:
                client_socket, client_addr = self.sock.accept()
                print("[DEBUG] The client is connected. Connected IP : {}".format(client_addr[0]))

                self.classifying_pool.submit(self._do_action, client_socket)

        except Exception as e:
            print("[ERROR] ", e)
        finally:
            self.sock.close()

    def _do_action(self, client):

        global CONFIG_FILE_NAME
        global READ_BASE_PATH
        global SAVE_SPA_PATH

        fileSize = client.recv(1024)
        fileSize = fileSize.decode()

        msg = "ready"
        client.sendall(msg.encode())

        with open(CONFIG_FILE_NAME, 'w') as fd:
            data = client.recv(int(fileSize))
            fd.write(data.decode())

        print("[DEBUG] Start making SPA file")
        _PATH = os.path.join(READ_BASE_PATH, CONFIG_FILE_NAME)
        print("[DEBUG] CONFIG_PATH : ", _PATH)
        self.config = Configuration(_PATH)

        OS_TYPE = self.config.get_os_type()
        FEATURE_TYPE = self.config.get_feature_type()
        IS_MALWARE = self.config.get_is_malware()
        MALWARE_TYPE = self.config.get_malware_type()
        DATA_SIZE = self.config.get_data_size()

        es = esSearch()
        res = es.search(os=OS_TYPE, isMal=IS_MALWARE, size=DATA_SIZE, feature=FEATURE_TYPE)
        print("[DEBUG] Detected size : ", len(res))

        FILE_NAME = self.save_spa(READ_BASE_PATH, SAVE_SPA_PATH, res, FEATURE_TYPE)
        print("[DEBUG] Finish making spa file")

        msg = "ready"
        client.sendall(msg.encode())

        RES_PATH = os.path.join(READ_BASE_PATH, FILE_NAME)

        client.sendall(FILE_NAME.encode())

        while client.recv(1024).decode() != "SIZE":
            continue

        client.sendall(self.getFileSize(RES_PATH).encode())

        while client.recv(1024).decode() != "DATA":
            continue

        self.sendFileData(RES_PATH)

        print("[DEBUG] Finish data transfer.")

    def print_Info(self):
        print("----------------------------------------------")
        print("Start Elasticsearch DB Server")
        print("           IP            : ", self.IP)
        print("           PORT          : ", self.PORT)
        print("----------------------------------------------")

    def save_spa(self, BASE_PATH, DSC_PATH, res, feature):

        if res[0].IS_MALWARE:
            TYPE = 'MALWARE'
        else:
            TYPE = 'BENIGN'

        FILE_NAME = res[0].TYPE_OF_OS + "_" + TYPE + "_" + feature + ".spa"
        DSC_PATH = os.path.join(DSC_PATH, FILE_NAME)
        fd = open(DSC_PATH, 'w')

        for doc in res:
            PATH = doc.featureInfo[feature][0]
            PATH = os.path.join(BASE_PATH, PATH)

            f = open(PATH)
            fd.write(f.readline() + '\n')
            f.close()

        fd.close()

        return FILE_NAME

    def getFileSize(self, path):
        fileSize = os.path.getsize(path)

        return str(fileSize)

    def getFileData(self, path):

        with open(path, 'r') as fd:
            data = ""

            for line in fd:
                data += line

        return data

    def sendFileData(self, path, client):

        with open(path, 'r') as fd:

            lines = fd.readlines()
            fileSize = len(lines)

            client.sendall(str(fileSize).encode())

            while client.recv(1024).decode() != "LINE":
                continue

            for line in lines:
                size = len(line.encode())

                client.sendall(str(size).encode())
                client.recv(1024)

                client.sendall(line.encode())




if __name__ == '__main__':
    server = DBServer()
    server.start()